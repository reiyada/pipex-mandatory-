//OPEN TYPE// -> <fcntl.h>
O_RDONLY	Opens the file in read-only mode.
O_WRONLY	Opens the file in write-only mode.
O_RDWR	    Opens the file in read and write mode.
O_CREAT	    Create a file if it doesnâ€™t exist.
O_EXCL	    Prevent creation if it already exists.
O_ APPEND	Opens the file and places the cursor at the end of the contents.
O_ASYNC	    Enable input and output control by signal.
O_CLOEXEC	Enable close-on-exec mode on the open file.
O_NONBLOCK	Disables blocking of the file opened.
O_TMPFILE	Create an unnamed temporary file at the specified path.



//process//
fork()      : you will make a child process, it returns a digit
                -> 0 : the child id
                -> negative : fork fials
                -> positive : the parent == the process id of THE CHILD
                -> the child process has the SAME memory as the parent
wait()      : wait until the child process finishes
getpid()    : this returns the process id
getppid()   : this returns the process id of the parent process
                -> every process has the parent process (even the main process)
**the child process must termintate first**
wait()      : blocks the calling process until its child processes exits
                or a signal is received. this returns its PID
                -> returns -1 if there is no child
exit(int status) : terminates the process immediately
---------------------------------------------------------------------------------
int main()
{
    int pid = fork();  // Create a new process

    //if (pid != 0)
        //wait();
    if (pid > 0) 
        printf("Parent Process: Child PID = %d, My PID = %d\n", pid, getpid());
    else if (pid == 0)
        printf("Child Process: My PID = %d, Parent PID = %d\n", getpid(), getppid());
    else
        printf("Fork failed!\n");
    return 0;
}
---------------------------------------------------------------------------------
sleep()       : it makes the users to wait for a specific time in seconds
---------------------------------------------------------------------------------
int main()
{
    printf("Program will sleep for 10 seconds in Linux.\n");
    sleep(10);
    printf("This line will be execused after 10 seconds.\n");
    return (0);
}
---------------------------------------------------------------------------------



//pipe//  https://www.youtube.com/watch?v=NlFvGZoAgTs&t=79s
scanf()     : read the value from input and store it into the second parametor
pipe(fd[2]) : data transfer between processes
                -> fd[0] == read //define the place you wanna read things from
                -> fd[1] == write //define the place you wanna write things on
                -> returns 0 on success, -1 on failure
---------------------------------------------------------------------------------
int main()
{
    int fd[2];
    char message[100];
    char buffer[100];
    int pid;

    if (pipe(fd) == -1)
    {
        perror("pipe failed\n");
        return (1);
    }
    pid = fork();
    if (pid > 0)
    {
        close(fd[0]);
        printf("[Parent] Enter a message :");
        scanf(" %99[^\n]", message);
        write(fd[1], &message, strlen(message) + 1);
        close(fd[1]);
    }
    else if (pid == 0)
    {
        close(fd[1]);
        read (fd[0], buffer, sizeof(buffer));
        printf ("Child received : %s\n", buffer);
        close(fd[0]);
    }
    else
    {
        perror ("fork failed\n");
        return (1);
    }
    return (0);
}
---------------------------------------------------------------------------------


access(char *filepath, int modes)   : Checks if a file exists and has the required permissions
                                        -> returns 0 if the file is accessible
                                        -> returns -1 if it is not
                                        -> mode
                                            F_OK : Checks if the file exists
                                            R_OK : Checks if the file is readable
                                            W_OK : Checks if the file is writable
                                            X_OK : Checks if the file is executable
dup(int oldfd)                      : Duplicates an existing file descriptor (oldfd)
                                        -> returns a new file descriptor with the lowest available number
dup2(int odfd, int newfd)           : Duplicates an existing file descriptor (oldfd) into the new file descriptor (newfd).
                                        it repaces newfd if it already exists
unlink(char *filepath)              : Delete a file from the filesystem
waitpid(pid_t pd, int *staus, int options) : this makes a parent wait for a specific child process to finish
                                            -> pid > 0 : wait for a specifit process id
                                            -> pid == -1 : wait for any child process
                                            -> status : stores the exit status of the child process
                                            -> options : special flag (0 for normal behavior)
---------------------------------------------------------------------------------
int main()
{
    pid_t pid1 = fork();
    if (pid1 == 0)
    {
        printf("First child running...\n");
        sleep(1);
        return (10);
    }
    pid_t pid2 = fork();
    if (pid2 == 0)
    {
        printf("Second child running...\n");
        sleep(2);
        return (20);
    }
    int status;
    waitpid(pid1, &status, 0);
    printf("First child exited with status %d\n", WEXITSTATUS(status));
    waitpid(pid2, &status, 0);
    printf("Second child exited with status %d\n", WEXITSTATUS(status));
    return (0);
}
---------------------------------------------------------------------------------
execve(char *filepath, char **argv, char **envp) : replace the current process with a new Program
                                    -> returns -1 if it fials
                                    char *argv[] = {"/bin/ls", "-l", "-a", NULL};
                                    execve("/bin/ls", argv, NULL)
                                    -> /bin/ls -l -a
                                    -> environment variables
                                        //KEY//
                                        $PATH : Directories where executables are searched
                                        $HOME : User's home directory
                                        $SHELL : Default shell (/bin/bash, /bin/zsh)
                                        $USER : Current logged-in username
                                            -> Keys and values are paired like "KEY=VALUE" 
tester: https://github.com/michmos/42_pipex_tester

//ERROR for the mandatory part//
- If the argument count is not 5
- If there is any empty arguments (ex) ./pipex infile "ls -l" "" outfile
- If the pipe creation fails
- If fork fails
- If you
